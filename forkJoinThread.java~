import java.util.concurrent.ForkJoinPool; 
import java.util.concurrent.RecursiveTask;
import java.util.*;
import java.util.concurrent.RecursiveAction;
public class forkJoinThread extends RecursiveAction {

   static int SEQUENTIAL_CUTOFF = 10;
   public static int NUM_OF_THREADS = 0;
   public static ArrayList<grid> results;
   public static int COUNTER = 0;
   public int start;
   public int end;
   public int numCol;
   public grid[][] terrain;
   
   public forkJoinThread(grid[][] g, int start, int end, int numCol){
      this.terrain = g;
      this.start = start;
      this.end = end;
      this.numCol = numCol;
      results = new ArrayList<grid>();
      NUM_OF_THREADS++;
      //System.out.println("Thread number: "+NUM_OF_THREADS+"created");
   }
   //overiding compute
   public void compute(){
      //Stopping condition for divide and conquer 
      if(end-start <= SEQUENTIAL_CUTOFF){
         for (int z=this.start;z< end;z++){
            for(int b =1;b< numCol ;b++){
               if(terrainMinima.isMinima(terrain[z][b], terrain) == true){
                  this.COUNTER++;
                  results.add(terrain[z][b]);
               }
            }
         }
      }
      else{
           forkJoinThread top = new forkJoinThread(terrain,start,(start+end)/2,numCol);
           forkJoinThread bottom = new forkJoinThread(terrain,(start+end)/2,end,numCol);
           top.fork();
           bottom.compute();
           top.join();
      }
   }
}
